{"version":3,"sources":["Modal.jsx","Galerry.jsx","serviceWorker.js","index.js"],"names":["Modal","props","handleKeyUp","e","toggleModal","keys","27","window","removeEventListener","keyCode","getImageDetails","a","id","state","fetch","response","json","transformed","setState","imageUrl","url","comments","isLoading","handleChange","target","name","value","comment","handleSubmit","preventDefault","method","headers","Accept","body","JSON","stringify","ok","Error","console","log","message","newComments","text","date","Date","addEventListener","this","document","style","overflow","className","src","alt","length","map","key","transformedDate","day","getDate","month","getMonth","year","getFullYear","normalizeDate","onSubmit","type","required","placeholder","onChange","onClick","Component","Galerry","getGallery","gallery","isModalActive","imageModalId","galleryStyle","image","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.609edac2.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./modal.css\";\r\n\r\n// Convert date from UNIX timestamp\r\nconst normalizeDate = (date) => {\r\n  const transformedDate = new Date(date);\r\n  const day = transformedDate.getDate();\r\n  const month = transformedDate.getMonth() + 1;\r\n  const year = transformedDate.getFullYear();\r\n  return `${day < 10 ? `0${day}` : day}.${\r\n    month < 10 ? `0${month}` : month\r\n  }.${year}`;\r\n};\r\n\r\nexport default class Modal extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const { id } = this.props;\r\n    this.state = {\r\n      id,\r\n      imageUrl: null,\r\n      comments: [],\r\n      name: \"\",\r\n      comment: \"\",\r\n      isLoading: true,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener(\"keyup\", this.handleKeyUp, false);\r\n    document.body.style.overflow = \"hidden\";\r\n    this.getImageDetails();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.body.style.overflow = \"initial\";\r\n    window.removeEventListener(\"keyup\", this.handleKeyUp, false);\r\n  }\r\n\r\n  // Closing the modal window by pressing the ESC key\r\n  handleKeyUp = (e) => {\r\n    const { toggleModal } = this.props;\r\n    const keys = {\r\n      27: () => {\r\n        toggleModal(null)(e);\r\n        window.removeEventListener(\"keyup\", this.handleKeyUp, false);\r\n      },\r\n    };\r\n    if (keys[e.keyCode]) {\r\n      keys[e.keyCode]();\r\n    }\r\n  };\r\n\r\n  // Loading comments and URL of Hi-Res version of the image\r\n  getImageDetails = async () => {\r\n    const { id } = this.state;\r\n    const response = await fetch(\r\n      `https://boiling-refuge-66454.herokuapp.com/images/${id}`\r\n    );\r\n    const transformed = await response.json();\r\n    this.setState({\r\n      imageUrl: transformed.url,\r\n      comments: transformed.comments,\r\n      isLoading: false,\r\n    });\r\n  };\r\n\r\n  // Control of input field\r\n  handleChange = ({ target }) => {\r\n    const { name, value } = target;\r\n    if (name === \"name\") {\r\n      this.setState({ name: value });\r\n      return;\r\n    }\r\n    this.setState({ comment: value });\r\n  };\r\n\r\n  // Posting comment request\r\n  handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    const { name, comment, id, comments } = this.state;\r\n    try {\r\n      const response = await fetch(\r\n        `https://boiling-refuge-66454.herokuapp.com/images/${id}/comments`,\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({ name, comment }),\r\n        }\r\n      );\r\n      if (!response.ok) {\r\n        throw new Error(\"response not 'OK'\");\r\n      }\r\n    } catch (error) {\r\n      console.log(\"Fetch request error:\", error.message);\r\n    }\r\n    // Imitate of adding a new comment\r\n    const newComments = [\r\n      ...comments,\r\n      { id: 99, text: comment, date: new Date() },\r\n    ];\r\n\r\n    this.setState({\r\n      name: \"\",\r\n      comment: \"\",\r\n      comments: newComments,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { toggleModal } = this.props;\r\n    const { imageUrl, comments, name, comment, isLoading } = this.state;\r\n    return (\r\n      <div className=\"modal-window\">\r\n        <div className=\"modal-container\">\r\n          <div className=\"modal-content\">\r\n            <div className=\"img-container\">\r\n              {isLoading ? (\r\n                <div className=\"donut\" />\r\n              ) : (\r\n                <img className=\"modal-img\" src={imageUrl} alt=\"\" />\r\n              )}\r\n            </div>\r\n          </div>\r\n          <div className=\"modal-comments\">\r\n            {comments.length < 1 ? (\r\n              <div className=\"comment comment-placeholder\">\r\n                Комментариев нет\r\n              </div>\r\n            ) : (\r\n              comments.map(({ id, text, date }) => (\r\n                <div className=\"comment\" id={id} key={id}>\r\n                  <div className=\"modal-date\">{normalizeDate(date)}</div>\r\n                  <div className=\"modal-comment\">{text}</div>\r\n                </div>\r\n              ))\r\n            )}\r\n          </div>\r\n          <form className=\"comment-form\" onSubmit={this.handleSubmit}>\r\n            <input\r\n              className=\"form-input\"\r\n              type=\"text\"\r\n              name=\"name\"\r\n              required\r\n              placeholder=\"Ваше имя\"\r\n              value={name}\r\n              onChange={this.handleChange}\r\n            />\r\n            <input\r\n              className=\"form-input\"\r\n              type=\"text\"\r\n              name=\"comment\"\r\n              required\r\n              value={comment}\r\n              placeholder=\"Ваш комментарий\"\r\n              onChange={this.handleChange}\r\n            />\r\n            <input\r\n              className=\"send-comment-button\"\r\n              type=\"submit\"\r\n              value=\"Оставить комментарий\"\r\n            />\r\n          </form>\r\n        </div>\r\n        <div className=\"close\" onClick={toggleModal(null)}></div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport \"./galerry.css\";\nimport Modal from \"./Modal.jsx\";\n\nexport default class Galerry extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gallery: [],\n      isModalActive: false,\n      imageModalId: null,\n      isLoading: true,\n    };\n  }\n\n  // loading a gallery on startup\n  componentDidMount() {\n    this.getGallery();\n  }\n\n  // GET request to the server\n  getGallery = async () => {\n    try {\n      const response = await fetch(\n        \"https://boiling-refuge-66454.herokuapp.com/images\"\n      );\n      if (!response.ok) {\n        throw new Error(\"failed to load gallery\");\n      }\n      const transformed = await response.json();\n      this.setState({\n        gallery: transformed,\n        isLoading: false,\n      });\n    } catch (error) {\n      console.log(\"error: \", error.message);\n    }\n  };\n\n  // Toggle modal window state\n  toggleModal = (id) => (e) => {\n    e.preventDefault();\n    const { isModalActive } = this.state;\n    this.setState({ isModalActive: !isModalActive, imageModalId: id });\n  };\n\n  render() {\n    const { gallery, imageModalId, isModalActive, isLoading } = this.state;\n    const galleryStyle = isModalActive\n      ? \"gallery-container modal-opened\"\n      : \"gallery-container\";\n\n    return (\n      <div className=\"main-container\">\n        <h1 className=\"main-header\">Gallery</h1>\n        {isLoading ? (\n          <div className=\"donut\" />\n        ) : (\n          <div className={galleryStyle}>\n            {gallery.map((image) => (\n              <img\n                className=\"main-img\"\n                key={image.id}\n                src={image.url}\n                alt=\"\"\n                onClick={this.toggleModal(image.id)}\n              />\n            ))}\n          </div>\n        )}\n        {isModalActive && (\n          <Modal id={imageModalId} toggleModal={this.toggleModal} />\n        )}\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Gallery from \"./Galerry.jsx\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Gallery />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}