{"version":3,"sources":["modal.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Modal","props","getImageDetails","a","id","state","fetch","response","json","transformed","setState","imageUrl","url","comments","handleChange","target","name","value","comment","handleSubmit","e","preventDefault","method","headers","Accept","body","JSON","stringify","ok","Error","console","log","message","this","toggleModal","className","src","alt","length","map","text","date","key","transformedDate","Date","day","getDate","month","getMonth","year","getFullYear","normalizeDate","onSubmit","type","required","placeholder","onChange","onClick","React","Component","Galerry","getGallery","gallery","isModalActive","imageModalId","image","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.fc66ac4e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./modal.css\";\r\n\r\nconst normalizeDate = (date) => {\r\n  const transformedDate = new Date(date);\r\n  const day = transformedDate.getDate();\r\n  const month = transformedDate.getMonth() + 1;\r\n  const year = transformedDate.getFullYear();\r\n  return `${day < 10 ? `0${day}` : day}.${\r\n    month < 10 ? `0${month}` : month\r\n  }.${year}`;\r\n};\r\n\r\nexport default class Modal extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const { id } = this.props;\r\n    this.state = { id, imageUrl: null, comments: [], name: \"\", comment: \"\" };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getImageDetails();\r\n  }\r\n\r\n  getImageDetails = async () => {\r\n    const { id } = this.state;\r\n    const response = await fetch(\r\n      `https://boiling-refuge-66454.herokuapp.com/images/${id}`\r\n    );\r\n    const transformed = await response.json();\r\n    this.setState({\r\n      imageUrl: transformed.url,\r\n      comments: transformed.comments,\r\n    });\r\n  };\r\n\r\n  handleChange = ({ target }) => {\r\n    const { name, value } = target;\r\n    if (name === \"name\") {\r\n      this.setState({ name: value });\r\n      return;\r\n    }\r\n    this.setState({ comment: value });\r\n  };\r\n\r\n  handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    const { name, comment, id } = this.state;\r\n    try {\r\n      const response = await fetch(\r\n        `https://boiling-refuge-66454.herokuapp.com/images/${id}/comments`,\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({ name, comment }),\r\n        }\r\n      );\r\n      if (!response.ok) {\r\n        throw new Error(\"response not 'OK'\");\r\n      }\r\n    } catch (error) {\r\n      console.log(\"Fetch request error:\", error.message);\r\n    }\r\n    this.setState({ name: \"\", comment: \"\" });\r\n  };\r\n\r\n  render() {\r\n    const { toggleModal } = this.props;\r\n    const { imageUrl, comments, name, comment } = this.state;\r\n    return (\r\n      <div className=\"modal-window\">\r\n        <div className=\"modal-container\">\r\n          <div className=\"modal-content\">\r\n            {imageUrl && <img className=\"modal-img\" src={imageUrl} alt=\"\" />}\r\n          </div>\r\n          <div className=\"modal-comments\">\r\n            {comments.length < 1 ? (\r\n              <div className=\"comment comment-placeholder\">\r\n                Комментариев нет\r\n              </div>\r\n            ) : (\r\n              comments.map(({ id, text, date }) => (\r\n                <div className=\"comment\" id={id} key={id}>\r\n                  <div className=\"modal-date\">{normalizeDate(date)}</div>\r\n                  <div className=\"modal-comment\">{text}</div>\r\n                </div>\r\n              ))\r\n            )}\r\n          </div>\r\n          <form className=\"comment-form\" onSubmit={this.handleSubmit}>\r\n            <input\r\n              className=\"form-input\"\r\n              type=\"text\"\r\n              name=\"name\"\r\n              required\r\n              placeholder=\"Ваше имя\"\r\n              value={name}\r\n              onChange={this.handleChange}\r\n            />\r\n            <input\r\n              className=\"form-input\"\r\n              type=\"text\"\r\n              name=\"comment\"\r\n              required\r\n              value={comment}\r\n              placeholder=\"Ваш комментарий\"\r\n              onChange={this.handleChange}\r\n            />\r\n            <input\r\n              className=\"send-comment-button\"\r\n              type=\"submit\"\r\n              value=\"Оставить комментарий\"\r\n            />\r\n          </form>\r\n        </div>\r\n        <div className=\"close\" onClick={toggleModal(null)}></div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Modal from \"./modal.jsx\";\n\nexport default class Galerry extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gallery: [],\n      isModalActive: false,\n      imageModalId: null,\n    };\n  }\n\n  componentDidMount() {\n    this.getGallery();\n  }\n\n  getGallery = async () => {\n    const response = await fetch(\n      \"https://boiling-refuge-66454.herokuapp.com/images\"\n    );\n    const transformed = await response.json();\n    this.setState({\n      gallery: transformed,\n    });\n  };\n\n  toggleModal = (id) => (e) => {\n    e.preventDefault();\n    const { isModalActive } = this.state;\n    this.setState({ isModalActive: !isModalActive, imageModalId: id });\n  };\n\n  render() {\n    const { gallery, imageModalId, isModalActive } = this.state;\n    return (\n      <div className=\"main-container\">\n        <h1 className=\"main-header\">Gallery</h1>\n        <div className=\"gallery-container\">\n          {isModalActive && (\n            <Modal id={imageModalId} toggleModal={this.toggleModal} />\n          )}\n          {gallery.map((image) => (\n            <img\n              className=\"main-img\"\n              key={image.id}\n              src={image.url}\n              alt=\"\"\n              onClick={this.toggleModal(image.id)}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Gallery from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Gallery />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}